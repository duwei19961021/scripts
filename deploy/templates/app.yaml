apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{.Release.Name}}
  namespace: {{.Release.Namespace}}
  labels:
    app: {{.Release.Name}}
spec:
  replicas: {{.Values.replicas}}
  selector:
    matchLabels:
      app: {{.Release.Name}} 
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{.Release.Name}}
    spec:
      imagePullSecrets:
      - name: {{.Values.imagePullSecrets | default ""}}
      containers:
      - name: {{.Release.Name}}
        image: {{.Values.image}}
        imagePullPolicy: {{.Values.imagePullPolicy | default "IfNotPresent"}}
        ports:
        - containerPort: {{.Values.containerPort}}
          protocol: {{.Values.protocol}}
        readinessProbe:
          tcpSocket:
            port: {{.Values.containerPort}}
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          limits:
            cpu: {{.Values.resources_limet_cpu | default ""}}
            memory: {{.Values.resources_limet_mem | default ""}}
          requests:
            cpu: {{.Values.resources_requests_cpu | default ""}}
            memory: {{.Values.resources_requests_mem | default ""}}
        volumeMounts:
          - name: {{.Release.Name}}-vhost
            mountPath: /etc/nginx/conf.d/
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: {{.Release.Name}}-vhost
          configMap:
            name: {{.Release.Name}}-vhost
            items:
            - key: server.conf
              path: server.conf 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.Release.Name}}-vhost
  namespace: {{.Release.Namespace}}
data:
  server.conf: {{.Files.Get "files/server.conf" | printf "%s" | indent 4}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{.Release.Name}}
  namespace: {{.Release.Namespace}}
spec:
  ports:
  - protocol: {{.Values.protocol}}
    port: {{.Values.servicePort}}
    targetPort: {{.Values.containerPort}}
  selector:
    app: {{.Release.Name}}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: {{.Release.Namespace}}
  name: {{.Release.Name}}
spec:
  rules:
  - host: {{.Values.ingress_host}}
    http:
      paths:
      - path:
        backend:
          serviceName: {{.Release.Name}}
          servicePort: {{.Values.servicePort}}
